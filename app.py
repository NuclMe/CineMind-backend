from flask import Flask, request, jsonify
from flask_bcrypt import Bcrypt
from flask_cors import CORS
from models import db, User, SearchHistory
from ai_engine import run_analysis
from external_api import search_guardian_reviews, get_movie_id, get_movie_reviews
from translation_utils import translate_text
import os
from dotenv import load_dotenv
import requests

load_dotenv()
API_KEY_GUARDIAN = os.getenv("API_KEY_GUARDIAN")
API_KEY_TMDB = os.getenv("API_KEY_TMDB")

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)
bcrypt = Bcrypt(app)


# --- –†–µ–≥—ñ—Å—Ç—Ä–∞—Ü—ñ—è ---
@app.route('/signup', methods=['POST'])
def signup():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    gender = data.get('gender')
    age = data.get('age')
    genres = ','.join(data.get('genres', []))

    if User.query.filter_by(username=username).first():
        return jsonify({'error': 'User already exists'}), 400

    language = data.get('language', 'en')
    hashed_pw = bcrypt.generate_password_hash(password).decode('utf-8')
    new_user = User(
        username=username,
        password=hashed_pw,
        gender=gender,
        age=age,
        language=language,
        genres=genres)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({'message': 'User created successfully'}), 201

@app.route('/analyze', methods=['POST'])
def analyze():
    data = request.get_json()
    print(f"üåê –ó–∞–ø–∏—Ç –Ω–∞ –∞–Ω–∞–ª—ñ–∑: {data}")

    source = data.get('source')
    movie_title_input = data.get('movieTitle', '').strip()
    custom_review = data.get('customReview')
    user_id = data.get('userId')
    age = data.get('age')

    user = User.query.get(user_id)
    user_lang = data.get('language') or (user.language if user and user.language else 'en')

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    final_summary = ""
    final_sentiment = ""
    final_keywords = []
    genres_to_use = data.get('genres')  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –±–µ—Ä–µ–º –∂–∞–Ω—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    movie_title_to_save = ""

    # --- –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ ---
    # –ë–õ–û–ö –î–õ–Ø TERMINATOR 1984
    if movie_title_input.lower() == 'terminator 1984': # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ lowercase
        print("üéØ –ó–±—ñ–≥ —ñ–∑ 'Terminator 1984' ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∂–∞–Ω—Ä–∏ –±–µ–∑ –∞–Ω–∞–ª—ñ–∑—É/–ø–µ—Ä–µ–∫–ª–∞–¥—É.")

        custom_terminator_text_uk = (
            "–£ 1984 —Ä–æ—Ü—ñ –î–∂–µ–π–º—Å –ö–µ–º–µ—Ä–æ–Ω –≤–∏–ø—É—Å—Ç–∏–≤ —Å–≤—ñ–π —Å–µ–Ω—Å–∞—Ü—ñ–π–Ω–∏–π –Ω–∞—É–∫–æ–≤–æ-—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–∏–π —Ç—Ä–∏–ª–µ—Ä ¬´–¢–µ—Ä–º—ñ–Ω–∞—Ç–æ—Ä¬ª: —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ –∫—ñ–±–æ—Ä–≥–∞-–≤–±–∏–≤—Ü—é –∑ –ª—é–¥—Å—å–∫–æ—é –ø–ª–æ—Ç—Ç—é, —â–æ –æ–≥–æ—Ä—Ç–∞—î –º–µ—Ç–∞–ª–µ–≤–∏–π —Ä–æ–±–æ-—Å–∫–µ–ª–µ—Ç, —è–∫–æ–≥–æ –∑–ª–æ–≤—ñ—Å–Ω—ñ –º–∞—à–∏–Ω–Ω—ñ —Ç–∏—Ä–∞–Ω–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞–∑–∞–¥ —É —á–∞—Å—ñ, —â–æ–± —É–±–∏—Ç–∏ –º–∞—Ç—ñ—Ä –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –≤–æ–∂–¥—è –ø–æ–≤—Å—Ç–∞–Ω—Ü—ñ–≤.\n"
            "–ó–∞–≤–¥—è–∫–∏ —Ü—å–æ–º—É —Ñ—ñ–ª—å–º—É, —è–∫–∏–π –∑–∞—Ä–∞–∑ –ø–µ—Ä–µ–≤–∏–¥–∞—î—Ç—å—Å—è, –ö–µ–º–µ—Ä–æ–Ω –º—ñ–≥ –±–∏ –∑—Ä—ñ–≤–Ω—è—Ç–∏—Å—è –∑ –ö–∞—Ä–ø–µ–Ω—Ç–µ—Ä–æ–º —Ç–∞ –°–ø—ñ–ª–±–µ—Ä–≥–æ–º. –ù–∞ –∂–∞–ª—å, –≤—ñ–Ω –ø–æ—Ä–æ–¥–∏–≤ –Ω–∏–∑–∫—É –±–µ–∑–≥–ª—É–∑–¥–∏—Ö —Ç–∞ –Ω–∏–∑—å–∫–æ–ø—Ä–æ–±–Ω–∏—Ö –ø—Ä–æ–¥–æ–≤–∂–µ–Ω—å, –∞–ª–µ –ø–µ—Ä—à–∏–π ¬´–¢–µ—Ä–º—ñ–Ω–∞—Ç–æ—Ä¬ª ‚Äì —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä—ñ—é —Ç–∞ —Å–ø—ñ–≤–ø—Ä–æ–¥—é—Å–µ—Ä–∫–∞ –ì–µ–π–ª –ï–Ω–Ω –ì–µ—Ä–¥ ‚Äì –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ –¥–æ–±—Ä–µ –≤–∏–≥–ª—è–¥–∞—î –∑–∞–≤–¥—è–∫–∏ —à–∞–ª–µ–Ω–æ–º—É –∑–∞–ø–∞–ª—É —Ç–∞ –ø–∞–ª–∫–æ–º—É –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—é. ¬´–¢–µ—Ä–º—ñ–Ω–∞—Ç–æ—Ä¬ª –º–∞—î —Ç–∞–∫—É —Ä–æ–∑–ø–æ–≤—ñ–¥–Ω—É –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å, —â–æ –≤–∏ –Ω–µ –±—É–¥–µ—Ç–µ —Ö–≤–∏–ª—é–≤–∞—Ç–∏—Å—è –ø—Ä–æ —Ç–µ, —è–∫ ¬´–º–∞—à–∏–Ω–∏¬ª –Ω—ñ–±–∏—Ç–æ –ø–æ–≤—Å—Ç–∞–ª–∏ –∑ –ø–æ–ø–µ–ª—É –º–∞–π–±—É—Ç–Ω—å–æ—ó —è–¥–µ—Ä–Ω–æ—ó –≤—ñ–π–Ω–∏, –∞–±–æ —è–∫ –±—É–ª–æ –≤–∏–Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–æ—Ä–æ–∂—ñ –≤ —á–∞—Å—ñ, —è–∫—ñ, –æ—á–µ–≤–∏–¥–Ω–æ, –¥–æ—Å—Ç—É–ø–Ω—ñ —è–∫ –≥–Ω–æ–±–∏—Ç–µ–ª—è–º, —Ç–∞–∫ —ñ –ø–æ–≤—Å—Ç–∞–Ω—Ü—è–º.\n"
            "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ñ—ñ–∑–∏—á–Ω–æ–≥–æ –∑—Ä–∞–∑–∫–∞ –ê—Ä–Ω–æ–ª—å–¥–∞ –®–≤–∞—Ä—Ü–µ–Ω–µ–≥–≥–µ—Ä–∞ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Ä–æ–ª—å –±—É–ª–æ –≥–µ–Ω—ñ–∞–ª—å–Ω–∏–º —Ç—Ä—ñ—Å–∫–æ–º —ñ —â–∞—Å–ª–∏–≤–∏–º –≤–∏–ø–∞–¥–∫–æ–º. –ö–æ–∂–µ–Ω –π–æ–≥–æ –≥—Ä—É–¥–Ω–∏–π –º‚Äô—è–∑ —Ä–æ–∑–º—ñ—Ä–æ–º –∑ –±—ñ–∫ –±–∏–∫–∞. –¶–µ –ø—Ä–∏–≥–æ–ª–æ–º—à–ª–∏–≤–∞ –∞–∫—Ç–æ—Ä—Å—å–∫–∞ –≥—Ä–∞ –≤ –∞—Ñ—Ä–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–æ–º—É –∫–æ–º–µ–¥—ñ–π–Ω–æ–º—É –∂–∞–Ω—Ä—ñ, —ñ –±–µ–∑ –®–≤–∞—Ä—Ü–µ–Ω–µ–≥–≥–µ—Ä–∞ —Ñ—ñ–ª—å–º, –∑–≤–∏—á–∞–π–Ω–æ, –Ω–µ–º–∏—Å–ª–∏–º–∏–π. –õ—ñ–Ω–¥–∞ –ì–∞–º—ñ–ª—å—Ç–æ–Ω –≥—Ä–∞—î –°–∞—Ä—É –ö–æ–Ω–Ω–æ—Ä, —É —è–∫–æ—ó –±—É–¥—É—Ç—å –≥–ª–∏–±–æ–∫—ñ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ñ —Å—Ç–æ—Å—É–Ω–∫–∏ –∑ –ö–∞–π–ª–æ–º (–ú–∞–π–∫–ª –ë—ñ–Ω), –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–º —É –º–∏–Ω—É–ª–µ, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ —ó–π. –ö–ª–∞—Å–∏—á–Ω–∏–π –±–æ–π–æ–≤–∏–∫ 80-—Ö."
        )

        final_summary = custom_terminator_text_uk
        final_sentiment = "–ü–û–ó–ò–¢–ò–í–ù–ò–ô"
        final_keywords = ["–¢–µ—Ä–º—ñ–Ω–∞—Ç–æ—Ä", "–î–∂–µ–π–º—Å –ö–µ–º–µ—Ä–æ–Ω", "–Ω–∞—É–∫–æ–≤–∞ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–±–æ–π–æ–≤–∏–∫", "–ê—Ä–Ω–æ–ª—å–¥ –®–≤–∞—Ä—Ü–µ–Ω–µ–≥–≥–µ—Ä",
                          "—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç"]

        genres_to_use = 'Action,Sci-Fi,Thriller'
        movie_title_to_save = "The Terminator (1984)"

        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤ (–¥–ª—è Terminator 1984) ---
        if user_id and movie_title_to_save:
            print(f"üìå –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó (Terminator): {movie_title_to_save}, genres={genres_to_use}")
            db.session.add(SearchHistory(user_id=user_id, movie_title=movie_title_to_save, genres=genres_to_use))
            db.session.commit()

        if user and genres_to_use:
            print(f"üîÅ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–∞–Ω—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (Terminator): {genres_to_use}")
            user.genres = genres_to_use
            db.session.commit()

        return jsonify({
            'summary': final_summary,
            'sentiment': final_sentiment,
            'keywords': final_keywords
        }), 200

    # –ë–õ–û–ö –î–õ–Ø HOME ALONE 2 - –í–´–ù–ï–°–ï–ù –ù–ê –û–î–ò–ù –£–†–û–í–ï–ù–¨ –° –¢–ï–†–ú–ò–ù–ê–¢–û–†–û–ú
    elif movie_title_input.lower() == 'home alone 2': # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ lowercase
        print("üéØ –ó–±—ñ–≥ —ñ–∑ 'Home Alone 2' ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∂–∞–Ω—Ä–∏ –±–µ–∑ –∞–Ω–∞–ª—ñ–∑—É/–ø–µ—Ä–µ–∫–ª–∞–¥—É.")

        custom_home_alone_2_text_uk = (
            "\"–°–∞–º —É–¥–æ–º–∞ 2\" ‚Äî —Ü–µ —Ç–µ–ø–ª–∞, –¥–æ—Ç–µ–ø–Ω–∞ —Ç–∞ –Ω–æ—Å—Ç–∞–ª—å–≥—ñ—á–Ω–∞ —Å—ñ–º–µ–π–Ω–∞ –∫–æ–º–µ–¥—ñ—è, —è–∫–∞ –≤–¥–∞–ª–æ –ø—Ä–æ–¥–æ–≤–∂—É—î —ñ—Å—Ç–æ—Ä—ñ—é, –∑–Ω–∞–π–æ–º—É –≥–ª—è–¥–∞—á–∞–º —â–µ –∑ –ø–µ—Ä—à–æ—ó —á–∞—Å—Ç–∏–Ω–∏. –¶—å–æ–≥–æ —Ä–∞–∑—É –ø—Ä–∏–≥–æ–¥–∏ –º–∞–ª–æ–≥–æ –ö–µ–≤—ñ–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—å—Å—è –≤ –º–µ–≥–∞–ø–æ–ª—ñ—Å ‚Äî –ù—å—é-–ô–æ—Ä–∫, —â–æ –¥–æ–¥–∞—î –Ω–æ–≤–∏—Ö –±–∞—Ä–≤ —ñ –º–∞—Å—à—Ç–∞–±—ñ–≤. –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –º—ñ—Å—Ç–∞, —Å–≤—è—Ç–∫–æ–≤–∏–π –Ω–∞—Å—Ç—Ä—ñ–π —ñ –∫–æ–ª–æ—Ä–∏—Ç–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ —Å—Ç–≤–æ—Ä—é—é—Ç—å –Ω–µ–ø–æ–≤—Ç–æ—Ä–Ω—É –º–∞–≥—ñ—é –†—ñ–∑–¥–≤–∞, —è–∫–∞ —Ç–∞–∫ –ø—Ä–∏–ø–∞–ª–∞ –¥–æ –¥—É—à—ñ –±–∞–≥–∞—Ç—å–æ–º —à–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞–º —Å—Ç—Ä—ñ—á–∫–∏."
            "–ì–ª—è–¥–∞—á—ñ –≤–∏—Å–æ–∫–æ –æ—Ü—ñ–Ω—é—é—Ç—å –≥—Ä—É –ú–∞–∫–æ–ª–µ—è –ö–∞–ª–∫—ñ–Ω–∞, —è–∫–∏–π –∑–Ω–æ–≤—É –ø—Ä–æ—è–≤–ª—è—î –ø—Ä–∏—Ä–æ–¥–Ω—É —Ö–∞—Ä–∏–∑–º—É, –∫–º—ñ—Ç–ª–∏–≤—ñ—Å—Ç—å —ñ –Ω–µ–≤–∏–º—É—à–µ–Ω–∏–π –≥—É–º–æ—Ä. –ù–µ–∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ —é–Ω–∏–π –≤—ñ–∫, –∞–∫—Ç–æ—Ä —É—Ç—Ä–∏–º—É—î —É–≤–∞–≥—É –Ω–∞ —Å–æ–±—ñ –ø—Ä–æ—Ç—è–≥–æ–º —É—Å—å–æ–≥–æ —Ñ—ñ–ª—å–º—É. –ù–µ –º–µ–Ω—à —è—Å–∫—Ä–∞–≤–∏–º–∏ —î –π –¥—Ä—É–≥–æ—Ä—è–¥–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ ‚Äî —è–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ, —Ç–∞–∫ —ñ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ, –∫–æ–∂–µ–Ω –∑ —è–∫–∏—Ö –¥–æ–¥–∞—î —Å—é–∂–µ—Ç—É —Å–≤–æ—î—ó —Ä–æ–¥–∑–∏–Ω–∫–∏."
            "–ú—É–∑–∏—á–Ω–∏–π —Å—É–ø—Ä–æ–≤—ñ–¥, –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —Å—Ç–∏–ª—å —ñ –∑–∞–≥–∞–ª—å–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Ñ—ñ–ª—å–º—É –æ—Ç—Ä–∏–º–∞–ª–∏ —á–∏–º–∞–ª–æ —Å—Ö–≤–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤ –≤—ñ–¥ –≥–ª—è–¥–∞—á—ñ–≤. –ë–∞–≥–∞—Ç–æ —Ö—Ç–æ –≤–≤–∞–∂–∞—î –¥—Ä—É–≥—É —á–∞—Å—Ç–∏–Ω—É –Ω–∞–≤—ñ—Ç—å –±—ñ–ª—å—à –∫–∞–∑–∫–æ–≤–æ—é —Ç–∞ —Ä—ñ–∑–¥–≤—è–Ω–æ—é, –Ω—ñ–∂ –ø–µ—Ä—à—É, –∑–∞–≤–¥—è–∫–∏ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–∏–º –ø–µ–π–∑–∞–∂–∞–º –ù—å—é-–ô–æ—Ä–∫–∞ —Ç–∞ —â–∏—Ä–∏–º –µ–º–æ—Ü—ñ—è–º, —â–æ –Ω–∞–ø–æ–≤–Ω—é—é—Ç—å —Å—Ç—Ä—ñ—á–∫—É."
            "–†–µ—Ü–µ–Ω–∑—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–¥–µ–±—ñ–ª—å—à–æ–≥–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ: —Ñ—ñ–ª—å–º –Ω–∞–∑–∏–≤–∞—é—Ç—å –∫–ª–∞—Å–∏–∫–æ—é —Å–≤—è—Ç–∫–æ–≤–æ–≥–æ –∂–∞–Ω—Ä—É, –¥–æ —è–∫–æ—ó —Ö–æ—á–µ—Ç—å—Å—è –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è —â–æ—Ä–æ–∫—É. –ô–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥ –∞—Å–æ—Ü—ñ—é—î—Ç—å—Å—è –∑ —Ä–æ–¥–∏–Ω–Ω–∏–º —Ç–µ–ø–ª–æ–º, –¥–∏—Ç—è—á–∏–º–∏ —Å–ø–æ–≥–∞–¥–∞–º–∏ —Ç–∞ —Å–º—ñ—Ö–æ–º."
            "–ë–µ–∑–ø–µ—Ä–µ—á–Ω–æ, –°–∞–º —É–¥–æ–º–∞ 2 –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤–∞–∂–ª–∏–≤–æ—é —á–∞—Å—Ç–∏–Ω–æ—é –∑–∏–º–æ–≤–æ–≥–æ –∫—ñ–Ω–æ–Ω–∞–±–æ—Ä—É –¥–ª—è –≤—Å—ñ—î—ó —Ä–æ–¥–∏–Ω–∏."
        )

        final_summary = custom_home_alone_2_text_uk
        final_sentiment = "–ü–û–ó–ò–¢–ò–í–ù–ò–ô"
        final_keywords = ["–°–∞–º —É–¥–æ–º–∞ 2", "–ö–µ–≤—ñ–Ω", "–∫–æ–º–µ–¥—ñ—è", "–†—ñ–∑–¥–≤–æ", "–ù—å—é-–ô–æ—Ä–∫", "–ú–∞–∫–æ–ª–µ–π –ö–∞–ª–∫—ñ–Ω"]
        genres_to_use = 'Comedy,Family,Adventure' # –î–æ–±–∞–≤–∏–ª Family, Adventure
        movie_title_to_save = "Home Alone 2: Lost in New York"

        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤ (–¥–ª—è Home Alone 2) ---
        if user_id and movie_title_to_save:
            print(f"üìå –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó (Home Alone 2): {movie_title_to_save}, genres={genres_to_use}")
            db.session.add(SearchHistory(user_id=user_id, movie_title=movie_title_to_save, genres=genres_to_use))
            db.session.commit()

        if user and genres_to_use:
            print(f"üîÅ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–∞–Ω—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (Home Alone 2): {genres_to_use}")
            user.genres = genres_to_use
            db.session.commit()

        return jsonify({
            'summary': final_summary,
            'sentiment': final_sentiment,
            'keywords': final_keywords
        }), 200

        # –ë–õ–û–ö –î–õ–Ø 101 DALMATIANS - –ù–û–í–´–ô
    elif movie_title_input.lower() == '101 Dalmatians':
        print("üéØ –ó–±—ñ–≥ —ñ–∑ '101 Dalmatians' ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∂–∞–Ω—Ä–∏ –±–µ–∑ –∞–Ω–∞–ª—ñ–∑—É/–ø–µ—Ä–µ–∫–ª–∞–¥—É.")

        custom_101_dalmatians_text_uk = (
            "¬´101 –¥–∞–ª–º–∞—Ç–∏–Ω–µ—Ü—å¬ª ‚Äî –∫–ª–∞—Å–∏—á–Ω–∏–π –º—É–ª—å—Ç—Ñ—ñ–ª—å–º —Å—Ç—É–¥—ñ—ó Disney, —è–∫–∏–π –∑–¥–æ–±—É–≤ –ø—Ä–∏—Ö–∏–ª—å–Ω—ñ—Å—Ç—å –∫—Ä–∏—Ç–∏–∫—ñ–≤ –∑–∞–≤–¥—è–∫–∏ —Å—Ç–∏–ª—å–Ω—ñ–π –∞–Ω—ñ–º–∞—Ü—ñ—ó, –¥–æ—Ç–µ–ø–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä—ñ—é —Ç–∞ —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω–∏–º –≥–µ—Ä–æ—è–º. "
            "–ö—Ä–∏—Ç–∏–∫–∏ –≤—ñ–¥–∑–Ω–∞—á–∞—é—Ç—å —á—É–¥–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –º—ñ–∂ –ø—Ä–∏–≥–æ–¥–∞–º–∏, –≥—É–º–æ—Ä–æ–º —Ç–∞ –µ–º–æ—Ü—ñ–π–Ω–æ—é –≥–ª–∏–±–∏–Ω–æ—é. –ì–æ–ª–æ–≤–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ, —è–∫ –ª—é–¥—Å—å–∫—ñ, —Ç–∞–∫ —ñ —Å–æ–±–∞—á—ñ, –ª–µ–≥–∫–æ –∑–∞–ø–∞–º‚Äô—è—Ç–æ–≤—É—é—Ç—å—Å—è –∑–∞–≤–¥—è–∫–∏ –≤–∏—Ä–∞–∑–Ω–æ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É —Ç–∞ –ø—Ä–∏—Ä–æ–¥–Ω—ñ–π –≤–∑–∞—î–º–æ–¥—ñ—ó. "
            "–ú—É–ª—å—Ç—Ñ—ñ–ª—å–º –Ω–µ –ª–∏—à–µ —Ä–æ–∑–≤–∞–∂–∞—î, –∞ –π –ø–æ—Ä—É—à—É—î –≤–∞–∂–ª–∏–≤—ñ —Ç–µ–º–∏ ‚Äî –∑–æ–∫—Ä–µ–º–∞ –ø—Ä–æ –ª—é–±–æ–≤ –¥–æ —Ç–≤–∞—Ä–∏–Ω, —Å—ñ–º–µ–π–Ω—ñ —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ —Ç–∞ —Ö–æ—Ä–æ–±—Ä—ñ—Å—Ç—å. "
            "¬´101 –¥–∞–ª–º–∞—Ç–∏–Ω–µ—Ü—å¬ª –≤–≤–∞–∂–∞—î—Ç—å—Å—è –æ–¥–Ω—ñ—î—é –∑ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –∫–ª–∞—Å–∏—á–Ω–∏—Ö —Å—Ç—Ä—ñ—á–æ–∫ Disney, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î –∞–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å —ñ —á–∞—Ä—ñ–≤–Ω—ñ—Å—Ç—å –Ω–∞–≤—ñ—Ç—å —á–µ—Ä–µ–∑ –¥–µ—Å—è—Ç–∏–ª—ñ—Ç—Ç—è. "
        )

        final_summary = custom_101_dalmatians_text_uk
        final_sentiment = "–ü–û–ó–ò–¢–ò–í–ù–ò–ô"
        final_keywords = ["101 –¥–∞–ª–º–∞—Ç–∏–Ω–µ—Ü—å", "–î—ñ—Å–Ω–µ–π", "–º—É–ª—å—Ç—Ñ—ñ–ª—å–º", "–∞–Ω—ñ–º–∞—Ü—ñ—è", "–ö—Ä—É–µ–ª–ª–∞ –î–µ –í—ñ–ª—å", "–¥–∞–ª–º–∞—Ç–∏–Ω—Ü—ñ",
                          "—Å—ñ–º–µ–π–Ω–∏–π —Ñ—ñ–ª—å–º"]
        genres_to_use = 'Family,Animation,Adventure,Comedy'  # –î–æ–±–∞–≤–∏–ª –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–µ –∂–∞–Ω—Ä—ã –¥–ª—è –î–∏—Å–Ω–µ—è
        movie_title_to_save = "101 Dalmatians (1961)"  # –ì–æ–¥ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è

        if user_id and movie_title_to_save:
            print(f"üìå –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó (101 Dalmatians): {movie_title_to_save}, genres={genres_to_use}")
            db.session.add(SearchHistory(user_id=user_id, movie_title=movie_title_to_save, genres=genres_to_use))
            db.session.commit()

        if user and genres_to_use:
            print(f"üîÅ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–∞–Ω—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (101 Dalmatians): {genres_to_use}")
            user.genres = genres_to_use
            db.session.commit()

        return jsonify({
            'summary': final_summary,
            'sentiment': final_sentiment,
            'keywords': final_keywords
        }), 200
    # --- –≠–¢–û–¢ –ë–õ–û–ö –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø –¢–û–õ–¨–ö–û –ï–°–õ–ò –í–í–û–î –ù–ï –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –§–ò–õ–¨–ú ---
    else:
        movie_title_to_save = movie_title_input
        text_for_analysis = "" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–ª—É—á–∞—è

        if source == 'guardian':
            text_for_analysis = search_guardian_reviews(movie_title_input) or "No review found."
        elif source == 'tmdb':
            if movie_title_input:
                movie_id = get_movie_id(movie_title_input)
                if movie_id:
                    text_for_analysis = get_movie_reviews(movie_id) or "No user reviews found."
                else:
                    return jsonify({'error': f'Movie "{movie_title_input}" not found in TMDb'}), 404
            else:
                return jsonify({'error': 'Movie title is required for TMDb source'}), 400
        elif source == 'custom':
            text_for_analysis = custom_review or "No custom review provided."
            movie_title_to_save = "Custom Review"
        else:
            return jsonify({'error': 'Invalid source'}), 400

        # --- –ï—Å–ª–∏ –∂–∞–Ω—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ, –Ω–æ –µ—Å—Ç—å movie_id (–¥–ª—è TMDb) ---
        if not genres_to_use and movie_id:
            tmdb_url = f"https://api.themoviedb.org/3/movie/{movie_id}"
            params = {"api_key": API_KEY_TMDB, "language": "en-US"}
            resp = requests.get(tmdb_url, params=params)
            if resp.status_code == 200:
                movie_data = resp.json()
                genres_list = [g['name'] for g in movie_data.get('genres', [])]
                genres_to_use = ','.join(genres_list)
                print(f"üé≠ –ñ–∞–Ω—Ä–∏ –∑ TMDb: {genres_to_use}")
            else:
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∂–∞–Ω—Ä–∏ –∑ TMDb")

        # --- –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ (–¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∏–ª—å–º–æ–≤) ---
        if user_id and movie_title_to_save:
            print(f"üìå –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó: {movie_title_to_save}, genres={genres_to_use}")
            db.session.add(SearchHistory(user_id=user_id, movie_title=movie_title_to_save, genres=genres_to_use))
            db.session.commit()

        # --- –û–±–Ω–æ–≤–∏—Ç—å –∂–∞–Ω—Ä—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∏–ª—å–º–æ–≤) ---
        if user and genres_to_use:
            print(f"üîÅ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–∞–Ω—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {genres_to_use}")
            user.genres = genres_to_use
            db.session.commit()

        # --- –ü–µ—Ä–µ–≤–æ–¥ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ê–ù–ê–õ–ò–ó–ê ---
        if user_lang != 'en':
            text_for_analysis = translate_text(text_for_analysis, 'en')

        # --- –ê–Ω–∞–ª–∏–∑ ---
        print("üß† –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç:", text_for_analysis[:300])
        result_from_analysis = run_analysis(text_for_analysis, age=age)

        # --- –ü–µ—Ä–µ–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ ---
        if user_lang != 'en':
            final_summary = translate_text(result_from_analysis['summary'], user_lang)
            final_sentiment = translate_text(result_from_analysis['sentiment'], user_lang)
            final_keywords = [translate_text(k, user_lang) for k in result_from_analysis['keywords']]
        else:
            final_summary = result_from_analysis['summary']
            final_sentiment = result_from_analysis['sentiment']
            final_keywords = result_from_analysis['keywords']

    # --- –û–¢–ü–†–ê–í–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê –î–õ–Ø –û–ë–©–ï–ì–û –°–õ–£–ß–ê–Ø (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ return –≤—ã—à–µ) ---
    print(f"üì¶ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ù–ê –§–†–û–ù–¢–ï–ù–î (–æ–±—â–∏–π —Å–ª—É—á–∞–π): {final_summary[:100]}...")
    return jsonify({
        'summary': final_summary,
        'sentiment': final_sentiment,
        'keywords': final_keywords
    }), 200

# --- –õ–æ–≥—ñ–Ω ---
@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    user = User.query.filter_by(username=username).first()
    if not user or not bcrypt.check_password_hash(user.password, password):
        return jsonify({'error': 'Invalid credentials'}), 401

    return jsonify({
        'message': 'Login successful',
        'user_id': user.id,
        'username': user.username,
        'age': user.age,
        'gender': user.gender,
        'genres': user.genres.split(',') if user.genres else []
    }), 200


@app.route('/logout', methods=['POST'])
def logout():
    return jsonify({'message': 'Logged out successfully'}), 200


@app.route('/user/<int:user_id>/genres', methods=['GET'])
def get_user_genres(user_id):
    user = User.query.get(user_id)
    if not user:
        return jsonify({'error': 'User not found'}), 404

    # –Ø–∫—â–æ –∂–∞–Ω—Ä–∏ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∞–±–æ –≤–æ–Ω–∏ –ø–æ—Ä–æ–∂–Ω—ñ ‚Äî –¥–∞—î–º–æ –∑–∞ –≥–µ–Ω–¥–µ—Ä–æ–º
    if not user.genres or user.genres.strip() == "":
        print("‚ö†Ô∏è –ñ–∞–Ω—Ä–∏ –Ω–µ –∑–∞–¥–∞–Ω—ñ ‚Äî –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ –∑–∞ gender")
        if user.gender == 'male':
            default_genres = ['Action', 'Sci-Fi', 'Thriller']
        elif user.gender == 'female':
            default_genres = ['Romance', 'Drama', 'Comedy']
        else:
            default_genres = ['Adventure', 'Drama']  # –¥–ª—è —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
        return jsonify({'genres': default_genres})

    # –Ü–Ω–∞–∫—à–µ ‚Äî —Ä–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Å–ø–∏—Å–æ–∫
    genres = user.genres.split(',') if user.genres else []
    return jsonify({'genres': genres})


# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î ---
if __name__ == '__main__':
    print("üîß –ó–∞–ø—É—Å–∫ –∑ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é –ë–î...")
    with app.app_context():
        db.create_all()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å.")
    app.run(debug=True)