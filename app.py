from flask import Flask, request, jsonify
from flask_bcrypt import Bcrypt
from flask_cors import CORS
from models import db, User, SearchHistory
from ai_engine import run_analysis
from external_api import search_guardian_reviews,get_movie_id,get_movie_reviews
from translation_utils import translate_text
import os
from dotenv import load_dotenv
import requests

load_dotenv()
API_KEY_GUARDIAN = os.getenv("API_KEY_GUARDIAN")
API_KEY_TMDB = os.getenv("API_KEY_TMDB")

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)
bcrypt = Bcrypt(app)


# --- –†–µ–≥—ñ—Å—Ç—Ä–∞—Ü—ñ—è ---
@app.route('/signup', methods=['POST'])
def signup():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    gender = data.get('gender')
    age = data.get('age')
    genres = ','.join(data.get('genres', []))

    if User.query.filter_by(username=username).first():
        return jsonify({'error': 'User already exists'}), 400

    language = data.get('language', 'en')
    hashed_pw = bcrypt.generate_password_hash(password).decode('utf-8')
    new_user = User(
        username=username,
        password=hashed_pw,
        gender=gender,
        age=age,
        language=language,
        genres=genres)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({'message': 'User created successfully'}), 201


@app.route('/analyze', methods=['POST'])
def analyze():
    data = request.get_json()
    print(f"üåê –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑: {data}")

    source = data.get('source')
    movie_title = data.get('movieTitle')
    genres = data.get('genres')
    custom_review = data.get('customReview')
    user_id = data.get('userId')
    age = data.get('age')

    user = User.query.get(user_id)
    user_lang = data.get('language') or (user.language if user and user.language else 'en')

    text = ""
    movie_id = None

    # --- –í–∏–±—ñ—Ä —Ç–µ–∫—Å—Ç—É ---
    if source == 'guardian':
        text = search_guardian_reviews(movie_title) or "No review found."
    elif source == 'tmdb':
        if movie_title:
            movie_id = get_movie_id(movie_title)
            if movie_id:
                text = get_movie_reviews(movie_id) or "No user reviews found."
            else:
                return jsonify({'error': 'Movie not found in TMDb'}), 404
        else:
            return jsonify({'error': 'Movie title is required for TMDb'}), 400
    elif source == 'custom':
        text = custom_review or "No custom review provided."
    else:
        return jsonify({'error': 'Invalid source'}), 400

    # --- –Ø–∫—â–æ –∂–∞–Ω—Ä–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ñ ‚Äî –æ—Ç—Ä–∏–º–∞—î–º–æ —ó—Ö –∑ TMDb ---
    if not genres:
        movie_id = get_movie_id(movie_title)
        if movie_id:
            tmdb_url = f"https://api.themoviedb.org/3/movie/{movie_id}"
            params = {"api_key": API_KEY_TMDB, "language": "en-US"}
            resp = requests.get(tmdb_url, params=params)
            if resp.status_code == 200:
                movie_data = resp.json()
                genres_list = [g['name'] for g in movie_data.get('genres', [])]
                genres = ','.join(genres_list)
                print(f"üé≠ –û—Ç—Ä–∏–º–∞–Ω–æ –∂–∞–Ω—Ä–∏ –∑ TMDb: {genres}")
            else:
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∂–∞–Ω—Ä–∏ –∑ TMDb")
                genres = None
        else:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ movie_id –∑–∞ –Ω–∞–∑–≤–æ—é")

    # --- –ó–∞–ø–∏—Å —É SearchHistory ---
    if user_id and movie_title:
        print(f"üìå –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é: user_id={user_id}, movie_title={movie_title}, genres={genres}")
        new_entry = SearchHistory(user_id=user_id, movie_title=movie_title, genres=genres)
        db.session.add(new_entry)
        db.session.commit()

    # --- –û–Ω–æ–≤–ª—é—î–º–æ genres –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
    if user and genres:
        print(f"üîÅ –û–Ω–æ–≤–ª—é—î–º–æ –∂–∞–Ω—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {genres}")
        user.genres = genres
        db.session.commit()

    # --- –ü–µ—Ä–µ–∫–ª–∞–¥ –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É ---
    if user_lang != 'en':
        text = translate_text(text, 'en')

    # --- –ê–Ω–∞–ª—ñ–∑ ---
    print("üß† –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç:", text[:300])
    result = run_analysis(text, age=age)

    # --- –ü–µ—Ä–µ–∫–ª–∞–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ ---
    if user_lang != 'en':
        result['summary'] = translate_text(result['summary'], user_lang)
        result['sentiment'] = translate_text(result['sentiment'], user_lang)
        result['keywords'] = [translate_text(kw, user_lang) for kw in result['keywords']]

    return jsonify(result), 200


# --- –õ–æ–≥—ñ–Ω ---
@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    user = User.query.filter_by(username=username).first()
    if not user or not bcrypt.check_password_hash(user.password, password):
        return jsonify({'error': 'Invalid credentials'}), 401

    return jsonify({
        'message': 'Login successful',
        'user_id': user.id,
        'username': user.username,
        'age': user.age,
        'gender': user.gender,
        'genres': user.genres.split(',') if user.genres else []
    }), 200


@app.route('/logout', methods=['POST'])
def logout():
    return jsonify({'message': 'Logged out successfully'}), 200


@app.route('/user/<int:user_id>/genres', methods=['GET'])
def get_user_genres(user_id):
    user = User.query.get(user_id)
    if not user:
        return jsonify({'error': 'User not found'}), 404

    # –Ø–∫—â–æ –∂–∞–Ω—Ä–∏ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∞–±–æ –≤–æ–Ω–∏ –ø–æ—Ä–æ–∂–Ω—ñ ‚Äî –¥–∞—î–º–æ –∑–∞ –≥–µ–Ω–¥–µ—Ä–æ–º
    if not user.genres or user.genres.strip() == "":
        print("‚ö†Ô∏è –ñ–∞–Ω—Ä–∏ –Ω–µ –∑–∞–¥–∞–Ω—ñ ‚Äî –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ –∑–∞ gender")
        if user.gender == 'male':
            default_genres = ['Action', 'Sci-Fi', 'Thriller']
        elif user.gender == 'female':
            default_genres = ['Romance', 'Drama', 'Comedy']
        else:
            default_genres = ['Adventure', 'Drama']  # –¥–ª—è —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
        return jsonify({'genres': default_genres})

    # –Ü–Ω–∞–∫—à–µ ‚Äî —Ä–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Å–ø–∏—Å–æ–∫
    genres = user.genres.split(',') if user.genres else []
    return jsonify({'genres': genres})


# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î ---
if __name__ == '__main__':
    print("üîß –ó–∞–ø—É—Å–∫ –∑ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é –ë–î...")
    with app.app_context():
        db.create_all()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å.")
    app.run(debug=True)
